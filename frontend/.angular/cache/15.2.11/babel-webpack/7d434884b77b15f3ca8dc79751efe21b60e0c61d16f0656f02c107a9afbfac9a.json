{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet SetlistGeneratorComponent = class SetlistGeneratorComponent {\n  constructor(fb, setlistService, router) {\n    this.fb = fb;\n    this.setlistService = setlistService;\n    this.router = router;\n    this.generating = false;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    const today = new Date().toISOString().split('T')[0];\n    this.generatorForm = this.fb.group({\n      name: ['', [Validators.required]],\n      date: [today],\n      venue: [''],\n      target_duration: [3600, [Validators.required, Validators.min(600)]] // Minimum 10 minutes (600 seconds)\n    });\n  }\n\n  onSubmit() {\n    if (this.generatorForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.generatorForm.controls).forEach(key => {\n        this.generatorForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.generating = true;\n    this.error = '';\n    this.setlistService.generateSetlist(this.generatorForm.value).subscribe({\n      next: setlist => {\n        this.generating = false;\n        // Navigate to the setlist view page\n        this.router.navigate(['/setlists', setlist.id]);\n      },\n      error: err => {\n        this.generating = false;\n        this.error = err.error?.error || 'Failed to generate setlist. Please try again later.';\n        console.error('Error generating setlist:', err);\n      }\n    });\n  }\n  // Helper method to convert duration from hours and minutes to seconds\n  convertDurationToSeconds(hours, minutes) {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) : minutes;\n    return hoursNum * 3600 + minutesNum * 60;\n  }\n  // Helper method to extract hours and minutes from duration in seconds\n  extractDurationComponents(durationInSeconds) {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor(durationInSeconds % 3600 / 60);\n    return {\n      hours,\n      minutes\n    };\n  }\n  // Update the form when hours/minutes inputs change\n  updateDuration(hours, minutes) {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) || 0 : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) || 0 : minutes;\n    const totalSeconds = this.convertDurationToSeconds(hoursNum, minutesNum);\n    this.generatorForm.patchValue({\n      target_duration: totalSeconds\n    });\n  }\n};\nSetlistGeneratorComponent = __decorate([Component({\n  selector: 'app-setlist-generator',\n  templateUrl: './setlist-generator.component.html',\n  styleUrls: ['./setlist-generator.component.scss']\n})], SetlistGeneratorComponent);\nexport { SetlistGeneratorComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","SetlistGeneratorComponent","constructor","fb","setlistService","router","ngOnInit","initForm","today","Date","toISOString","split","generatorForm","group","name","required","date","venue","target_duration","min","onSubmit","invalid","Object","keys","controls","forEach","key","get","markAsTouched","generating","error","generateSetlist","value","subscribe","next","setlist","navigate","id","err","console","convertDurationToSeconds","hours","minutes","hoursNum","parseInt","minutesNum","extractDurationComponents","durationInSeconds","Math","floor","updateDuration","totalSeconds","patchValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\components\\setlist-generator\\setlist-generator.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SetlistService } from '../../services/setlist.service';\n\n@Component({\n  selector: 'app-setlist-generator',\n  templateUrl: './setlist-generator.component.html',\n  styleUrls: ['./setlist-generator.component.scss']\n})\nexport class SetlistGeneratorComponent implements OnInit {\n  generatorForm!: FormGroup;\n  generating = false;\n  error = '';\n  \n  constructor(\n    private fb: FormBuilder,\n    private setlistService: SetlistService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    const today = new Date().toISOString().split('T')[0];\n    \n    this.generatorForm = this.fb.group({\n      name: ['', [Validators.required]],\n      date: [today],\n      venue: [''],\n      target_duration: [3600, [Validators.required, Validators.min(600)]] // Minimum 10 minutes (600 seconds)\n    });\n  }\n\n  onSubmit(): void {\n    if (this.generatorForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.generatorForm.controls).forEach(key => {\n        this.generatorForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n\n    this.generating = true;\n    this.error = '';\n\n    this.setlistService.generateSetlist(this.generatorForm.value).subscribe({\n      next: (setlist) => {\n        this.generating = false;\n        // Navigate to the setlist view page\n        this.router.navigate(['/setlists', setlist.id]);\n      },\n      error: (err) => {\n        this.generating = false;\n        this.error = err.error?.error || 'Failed to generate setlist. Please try again later.';\n        console.error('Error generating setlist:', err);\n      }\n    });\n  }\n\n  // Helper method to convert duration from hours and minutes to seconds\n  convertDurationToSeconds(hours: number | string, minutes: number | string): number {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) : minutes;\n    return (hoursNum * 3600) + (minutesNum * 60);\n  }\n\n  // Helper method to extract hours and minutes from duration in seconds\n  extractDurationComponents(durationInSeconds: number): { hours: number, minutes: number } {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor((durationInSeconds % 3600) / 60);\n    \n    return { hours, minutes };\n  }\n\n  // Update the form when hours/minutes inputs change\n  updateDuration(hours: number | string, minutes: number | string): void {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) || 0 : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) || 0 : minutes;\n    const totalSeconds = this.convertDurationToSeconds(hoursNum, minutesNum);\n    this.generatorForm.patchValue({ target_duration: totalSeconds });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}