{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SongService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/songs';\n  }\n  // Get all songs\n  getSongs() {\n    return this.http.get(this.apiUrl);\n  }\n  // Get a single song by ID\n  getSong(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Create a new song\n  createSong(song) {\n    return this.http.post(this.apiUrl, song);\n  }\n  // Update an existing song\n  updateSong(id, song) {\n    return this.http.put(`${this.apiUrl}/${id}`, song);\n  }\n  // Delete a song\n  deleteSong(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  // Upload songs via CSV\n  uploadSongs(file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n  static {\n    this.ɵfac = function SongService_Factory(t) {\n      return new (t || SongService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SongService,\n      factory: SongService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,iCAAiC;EAEV;EAExC;EACAC,QAAQ;IACN,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC;EAC3C;EAEA;EACAC,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAO,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACpD;EAEA;EACAC,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,IAAI,CAACL,MAAM,EAAEI,IAAI,CAAC;EAChD;EAEA;EACAE,UAAU,CAACJ,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC1D;EAEA;EACAI,UAAU,CAACN,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACT,MAAM,IAAIE,EAAE,EAAE,CAAC;EACjD;EAEA;EACAQ,WAAW,CAACC,IAAU;IACpB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAO,IAAI,CAACd,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,SAAS,EAAEY,QAAQ,CAAC;EAC1D;;;uBAnCWjB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAoB,SAAXpB,WAAW;MAAAqB,YAFV;IAAM;EAAA","names":["SongService","constructor","http","getSongs","get","apiUrl","getSong","id","createSong","song","post","updateSong","put","deleteSong","delete","uploadSongs","file","formData","FormData","append","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\services\\song.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Song } from '../models/song.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SongService {\n  private apiUrl = 'http://localhost:5000/api/songs';\n\n  constructor(private http: HttpClient) { }\n\n  // Get all songs\n  getSongs(): Observable<Song[]> {\n    return this.http.get<Song[]>(this.apiUrl);\n  }\n\n  // Get a single song by ID\n  getSong(id: number): Observable<Song> {\n    return this.http.get<Song>(`${this.apiUrl}/${id}`);\n  }\n\n  // Create a new song\n  createSong(song: Song): Observable<Song> {\n    return this.http.post<Song>(this.apiUrl, song);\n  }\n\n  // Update an existing song\n  updateSong(id: number, song: Song): Observable<Song> {\n    return this.http.put<Song>(`${this.apiUrl}/${id}`, song);\n  }\n\n  // Delete a song\n  deleteSong(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n\n  // Upload songs via CSV\n  uploadSongs(file: File): Observable<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(`${this.apiUrl}/upload`, formData);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}