{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/song.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SongFormComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.error, \"\\n\");\n  }\n}\nfunction SongFormComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"span\", 10);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction SongFormComponent_form_9_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtext(1, \" Title is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SongFormComponent_form_9_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtext(1, \" Artist is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SongFormComponent_form_9_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtext(1, \" Duration must be a positive number \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SongFormComponent_form_9_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtext(1, \" Tempo must be a positive number \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SongFormComponent_form_9_option_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 53);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, category_r10), \" \");\n  }\n}\nfunction SongFormComponent_form_9_option_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 53);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const level_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", level_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, level_r11), \" \");\n  }\n}\nfunction SongFormComponent_form_9_span_84_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 54);\n  }\n}\nfunction SongFormComponent_form_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 11);\n    i0.ɵɵlistener(\"ngSubmit\", function SongFormComponent_form_9_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 12)(2, \"div\", 13)(3, \"div\", 14)(4, \"div\", 15);\n    i0.ɵɵtext(5, \"Basic Information\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 16)(7, \"div\", 17)(8, \"label\", 18);\n    i0.ɵɵtext(9, \"Title *\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 19);\n    i0.ɵɵtemplate(11, SongFormComponent_form_9_div_11_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 17)(13, \"label\", 21);\n    i0.ɵɵtext(14, \"Artist *\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"input\", 22);\n    i0.ɵɵtemplate(16, SongFormComponent_form_9_div_16_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 17)(18, \"label\", 23);\n    i0.ɵɵtext(19, \"Lead Vocalist\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 17)(22, \"label\", 25);\n    i0.ɵɵtext(23, \"Duration (seconds)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(24, \"input\", 26);\n    i0.ɵɵtemplate(25, SongFormComponent_form_9_div_25_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementStart(26, \"small\", 27);\n    i0.ɵɵtext(27, \"Enter the song duration in seconds (e.g., 180 for 3:00)\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(28, \"div\", 13)(29, \"div\", 14)(30, \"div\", 15);\n    i0.ɵɵtext(31, \"Musical Properties\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 16)(33, \"div\", 17)(34, \"label\", 28);\n    i0.ɵɵtext(35, \"Tempo (BPM)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(36, \"input\", 29);\n    i0.ɵɵtemplate(37, SongFormComponent_form_9_div_37_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"div\", 17)(39, \"label\", 30);\n    i0.ɵɵtext(40, \"Tempo Category\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"select\", 31)(42, \"option\", 32);\n    i0.ɵɵtext(43, \"Select tempo category\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(44, SongFormComponent_form_9_option_44_Template, 3, 4, \"option\", 33);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(45, \"div\", 17)(46, \"label\", 34);\n    i0.ɵɵtext(47, \"Intensity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"select\", 35)(49, \"option\", 32);\n    i0.ɵɵtext(50, \"Select intensity level\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(51, SongFormComponent_form_9_option_51_Template, 3, 4, \"option\", 33);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(52, \"div\", 17)(53, \"label\", 36);\n    i0.ɵɵtext(54, \"Key\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(55, \"input\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(56, \"div\", 38);\n    i0.ɵɵelement(57, \"input\", 39);\n    i0.ɵɵelementStart(58, \"label\", 40);\n    i0.ɵɵtext(59, \" Minor Key \");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(60, \"div\", 41)(61, \"div\", 14)(62, \"div\", 15);\n    i0.ɵɵtext(63, \"Additional Properties\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(64, \"div\", 16)(65, \"div\", 12)(66, \"div\", 42)(67, \"div\", 38);\n    i0.ɵɵelement(68, \"input\", 43);\n    i0.ɵɵelementStart(69, \"label\", 44);\n    i0.ɵɵtext(70, \" Original Song \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(71, \"small\", 45);\n    i0.ɵɵtext(72, \"Uncheck if this is a cover song\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(73, \"div\", 42)(74, \"div\", 38);\n    i0.ɵɵelement(75, \"input\", 46);\n    i0.ɵɵelementStart(76, \"label\", 47);\n    i0.ɵɵtext(77, \" Hit Song \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(78, \"small\", 45);\n    i0.ɵɵtext(79, \"Check if this song should be included in every setlist\");\n    i0.ɵɵelementEnd()()()()()()()();\n    i0.ɵɵelementStart(80, \"div\", 48)(81, \"a\", 49);\n    i0.ɵɵtext(82, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(83, \"button\", 50);\n    i0.ɵɵtemplate(84, SongFormComponent_form_9_span_84_Template, 1, 0, \"span\", 51);\n    i0.ɵɵtext(85);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.songForm);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r2.songForm.get(\"title\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx_r2.songForm.get(\"title\")) == null ? null : tmp_1_0.touched));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r2.songForm.get(\"artist\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx_r2.songForm.get(\"artist\")) == null ? null : tmp_2_0.touched));\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r2.songForm.get(\"duration\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx_r2.songForm.get(\"duration\")) == null ? null : tmp_3_0.touched));\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx_r2.songForm.get(\"tempo\")) == null ? null : tmp_4_0.invalid) && ((tmp_4_0 = ctx_r2.songForm.get(\"tempo\")) == null ? null : tmp_4_0.touched));\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.tempoCategories);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.intensityLevels);\n    i0.ɵɵadvance(32);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.submitting);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitting);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.isEditMode ? \"Update\" : \"Save\", \" Song \");\n  }\n}\nexport class SongFormComponent {\n  constructor(fb, songService, route, router) {\n    this.fb = fb;\n    this.songService = songService;\n    this.route = route;\n    this.router = router;\n    this.isEditMode = false;\n    this.loading = false;\n    this.submitting = false;\n    this.error = '';\n    this.tempoCategories = ['slow', 'medium', 'fast'];\n    this.intensityLevels = ['low', 'medium', 'high'];\n  }\n  ngOnInit() {\n    this.initForm();\n    // Check if we're in edit mode\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.songId = +params['id'];\n        this.loadSong(this.songId);\n      }\n    });\n  }\n  initForm() {\n    this.songForm = this.fb.group({\n      title: ['', [Validators.required]],\n      artist: ['', [Validators.required]],\n      tempo: [null, [Validators.min(1)]],\n      tempo_category: [''],\n      intensity: [''],\n      lead_vocalist: [''],\n      key: [''],\n      is_minor: [false],\n      is_original: [true],\n      is_hit: [false],\n      duration: [null, [Validators.min(1)]]\n    });\n  }\n  loadSong(id) {\n    this.loading = true;\n    this.songService.getSong(id).subscribe({\n      next: song => {\n        this.songForm.patchValue(song);\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Failed to load song. Please try again later.';\n        this.loading = false;\n        console.error('Error loading song:', err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.songForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.songForm.controls).forEach(key => {\n        this.songForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    const songData = this.songForm.value;\n    this.submitting = true;\n    if (this.isEditMode && this.songId) {\n      // Update existing song\n      this.songService.updateSong(this.songId, songData).subscribe({\n        next: () => {\n          this.router.navigate(['/songs']);\n        },\n        error: err => {\n          this.error = 'Failed to update song. Please try again.';\n          this.submitting = false;\n          console.error('Error updating song:', err);\n        }\n      });\n    } else {\n      // Create new song\n      this.songService.createSong(songData).subscribe({\n        next: () => {\n          this.router.navigate(['/songs']);\n        },\n        error: err => {\n          this.error = 'Failed to create song. Please try again.';\n          this.submitting = false;\n          console.error('Error creating song:', err);\n        }\n      });\n    }\n  }\n  // Helper method to convert duration from minutes:seconds to seconds\n  convertDurationToSeconds(minutes, seconds) {\n    return minutes * 60 + seconds;\n  }\n  // Helper method to extract minutes and seconds from duration in seconds\n  extractDurationComponents(durationInSeconds) {\n    if (!durationInSeconds) {\n      return {\n        minutes: 0,\n        seconds: 0\n      };\n    }\n    const minutes = Math.floor(durationInSeconds / 60);\n    const seconds = durationInSeconds % 60;\n    return {\n      minutes,\n      seconds\n    };\n  }\n  static {\n    this.ɵfac = function SongFormComponent_Factory(t) {\n      return new (t || SongFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SongService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SongFormComponent,\n      selectors: [[\"app-song-form\"]],\n      decls: 10,\n      vars: 4,\n      consts: [[1, \"row\", \"mb-4\"], [1, \"col\"], [1, \"col-auto\"], [\"routerLink\", \"/songs\", 1, \"btn\", \"btn-outline-secondary\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"d-flex justify-content-center\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [1, \"d-flex\", \"justify-content-center\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"card\", \"mb-4\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"mb-3\"], [\"for\", \"title\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"title\", \"formControlName\", \"title\", \"placeholder\", \"Enter song title\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"artist\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"artist\", \"formControlName\", \"artist\", \"placeholder\", \"Enter artist name\", 1, \"form-control\"], [\"for\", \"lead_vocalist\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"lead_vocalist\", \"formControlName\", \"lead_vocalist\", \"placeholder\", \"Enter lead vocalist name\", 1, \"form-control\"], [\"for\", \"duration\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"duration\", \"formControlName\", \"duration\", \"placeholder\", \"Enter duration in seconds\", 1, \"form-control\"], [1, \"form-text\", \"text-muted\"], [\"for\", \"tempo\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"tempo\", \"formControlName\", \"tempo\", \"placeholder\", \"Enter tempo in BPM\", 1, \"form-control\"], [\"for\", \"tempo_category\", 1, \"form-label\"], [\"id\", \"tempo_category\", \"formControlName\", \"tempo_category\", 1, \"form-select\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"intensity\", 1, \"form-label\"], [\"id\", \"intensity\", \"formControlName\", \"intensity\", 1, \"form-select\"], [\"for\", \"key\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"key\", \"formControlName\", \"key\", \"placeholder\", \"e.g., A Minor, C Major\", 1, \"form-control\"], [1, \"form-check\", \"mb-3\"], [\"type\", \"checkbox\", \"id\", \"is_minor\", \"formControlName\", \"is_minor\", 1, \"form-check-input\"], [\"for\", \"is_minor\", 1, \"form-check-label\"], [1, \"col-12\"], [1, \"col-md-4\"], [\"type\", \"checkbox\", \"id\", \"is_original\", \"formControlName\", \"is_original\", 1, \"form-check-input\"], [\"for\", \"is_original\", 1, \"form-check-label\"], [1, \"form-text\", \"text-muted\", \"d-block\"], [\"type\", \"checkbox\", \"id\", \"is_hit\", \"formControlName\", \"is_hit\", 1, \"form-check-input\"], [\"for\", \"is_hit\", 1, \"form-check-label\"], [1, \"d-grid\", \"gap-2\", \"d-md-flex\", \"justify-content-md-end\", \"mt-4\"], [\"routerLink\", \"/songs\", 1, \"btn\", \"btn-secondary\", \"me-md-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", \"role\", \"status\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [1, \"text-danger\"], [3, \"value\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n      template: function SongFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"a\", 3);\n          i0.ɵɵtext(6, \"Back to Song List\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(7, SongFormComponent_div_7_Template, 2, 1, \"div\", 4);\n          i0.ɵɵtemplate(8, SongFormComponent_div_8_Template, 4, 0, \"div\", 5);\n          i0.ɵɵtemplate(9, SongFormComponent_form_9_Template, 86, 10, \"form\", 6);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Edit\" : \"Add\", \" Song\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink, i4.TitleCasePipe],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zb25nLWZvcm0vc29uZy1mb3JtLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogU29uZyBmb3JtIGNvbXBvbmVudCBzdHlsZXMgKi9cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","SongFormComponent","constructor","fb","songService","route","router","ngOnInit","initForm","params","subscribe","isEditMode","songId","loadSong","songForm","group","title","required","artist","tempo","min","tempo_category","intensity","lead_vocalist","key","is_minor","is_original","is_hit","duration","id","loading","getSong","next","song","patchValue","error","err","console","onSubmit","invalid","Object","keys","controls","forEach","get","markAsTouched","songData","value","submitting","updateSong","navigate","createSong","convertDurationToSeconds","minutes","seconds","extractDurationComponents","durationInSeconds","Math","floor","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\components\\song-form\\song-form.component.ts","C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\components\\song-form\\song-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Song } from '../../models/song.model';\nimport { SongService } from '../../services/song.service';\n\n@Component({\n  selector: 'app-song-form',\n  templateUrl: './song-form.component.html',\n  styleUrls: ['./song-form.component.scss']\n})\nexport class SongFormComponent implements OnInit {\n  songForm!: FormGroup;\n  isEditMode = false;\n  songId?: number;\n  loading = false;\n  submitting = false;\n  error = '';\n  \n  tempoCategories = ['slow', 'medium', 'fast'];\n  intensityLevels = ['low', 'medium', 'high'];\n  \n  constructor(\n    private fb: FormBuilder,\n    private songService: SongService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.initForm();\n    \n    // Check if we're in edit mode\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.isEditMode = true;\n        this.songId = +params['id'];\n        this.loadSong(this.songId);\n      }\n    });\n  }\n\n  initForm(): void {\n    this.songForm = this.fb.group({\n      title: ['', [Validators.required]],\n      artist: ['', [Validators.required]],\n      tempo: [null, [Validators.min(1)]],\n      tempo_category: [''],\n      intensity: [''],\n      lead_vocalist: [''],\n      key: [''],\n      is_minor: [false],\n      is_original: [true],\n      is_hit: [false],\n      duration: [null, [Validators.min(1)]]\n    });\n  }\n\n  loadSong(id: number): void {\n    this.loading = true;\n    this.songService.getSong(id).subscribe({\n      next: (song) => {\n        this.songForm.patchValue(song);\n        this.loading = false;\n      },\n      error: (err) => {\n        this.error = 'Failed to load song. Please try again later.';\n        this.loading = false;\n        console.error('Error loading song:', err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.songForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.songForm.controls).forEach(key => {\n        this.songForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n\n    const songData: Song = this.songForm.value;\n    this.submitting = true;\n\n    if (this.isEditMode && this.songId) {\n      // Update existing song\n      this.songService.updateSong(this.songId, songData).subscribe({\n        next: () => {\n          this.router.navigate(['/songs']);\n        },\n        error: (err) => {\n          this.error = 'Failed to update song. Please try again.';\n          this.submitting = false;\n          console.error('Error updating song:', err);\n        }\n      });\n    } else {\n      // Create new song\n      this.songService.createSong(songData).subscribe({\n        next: () => {\n          this.router.navigate(['/songs']);\n        },\n        error: (err) => {\n          this.error = 'Failed to create song. Please try again.';\n          this.submitting = false;\n          console.error('Error creating song:', err);\n        }\n      });\n    }\n  }\n\n  // Helper method to convert duration from minutes:seconds to seconds\n  convertDurationToSeconds(minutes: number, seconds: number): number {\n    return (minutes * 60) + seconds;\n  }\n\n  // Helper method to extract minutes and seconds from duration in seconds\n  extractDurationComponents(durationInSeconds?: number): { minutes: number, seconds: number } {\n    if (!durationInSeconds) {\n      return { minutes: 0, seconds: 0 };\n    }\n    \n    const minutes = Math.floor(durationInSeconds / 60);\n    const seconds = durationInSeconds % 60;\n    \n    return { minutes, seconds };\n  }\n}\n","<div class=\"row mb-4\">\n  <div class=\"col\">\n    <h2>{{ isEditMode ? 'Edit' : 'Add' }} Song</h2>\n  </div>\n  <div class=\"col-auto\">\n    <a routerLink=\"/songs\" class=\"btn btn-outline-secondary\">Back to Song List</a>\n  </div>\n</div>\n\n<div *ngIf=\"error\" class=\"alert alert-danger\">\n  {{ error }}\n</div>\n\n<div *ngIf=\"loading\" class=\"d-flex justify-content-center\">\n  <div class=\"spinner-border text-primary\" role=\"status\">\n    <span class=\"visually-hidden\">Loading...</span>\n  </div>\n</div>\n\n<form [formGroup]=\"songForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"!loading\">\n  <div class=\"row\">\n    <!-- Basic Song Information -->\n    <div class=\"col-md-6\">\n      <div class=\"card mb-4\">\n        <div class=\"card-header\">Basic Information</div>\n        <div class=\"card-body\">\n          <!-- Title -->\n          <div class=\"mb-3\">\n            <label for=\"title\" class=\"form-label\">Title *</label>\n            <input type=\"text\" class=\"form-control\" id=\"title\" formControlName=\"title\" placeholder=\"Enter song title\">\n            <div *ngIf=\"songForm.get('title')?.invalid && songForm.get('title')?.touched\" class=\"text-danger\">\n              Title is required\n            </div>\n          </div>\n\n          <!-- Artist -->\n          <div class=\"mb-3\">\n            <label for=\"artist\" class=\"form-label\">Artist *</label>\n            <input type=\"text\" class=\"form-control\" id=\"artist\" formControlName=\"artist\" placeholder=\"Enter artist name\">\n            <div *ngIf=\"songForm.get('artist')?.invalid && songForm.get('artist')?.touched\" class=\"text-danger\">\n              Artist is required\n            </div>\n          </div>\n\n          <!-- Lead Vocalist -->\n          <div class=\"mb-3\">\n            <label for=\"lead_vocalist\" class=\"form-label\">Lead Vocalist</label>\n            <input type=\"text\" class=\"form-control\" id=\"lead_vocalist\" formControlName=\"lead_vocalist\" placeholder=\"Enter lead vocalist name\">\n          </div>\n\n          <!-- Duration -->\n          <div class=\"mb-3\">\n            <label for=\"duration\" class=\"form-label\">Duration (seconds)</label>\n            <input type=\"number\" class=\"form-control\" id=\"duration\" formControlName=\"duration\" placeholder=\"Enter duration in seconds\">\n            <div *ngIf=\"songForm.get('duration')?.invalid && songForm.get('duration')?.touched\" class=\"text-danger\">\n              Duration must be a positive number\n            </div>\n            <small class=\"form-text text-muted\">Enter the song duration in seconds (e.g., 180 for 3:00)</small>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Musical Properties -->\n    <div class=\"col-md-6\">\n      <div class=\"card mb-4\">\n        <div class=\"card-header\">Musical Properties</div>\n        <div class=\"card-body\">\n          <!-- Tempo -->\n          <div class=\"mb-3\">\n            <label for=\"tempo\" class=\"form-label\">Tempo (BPM)</label>\n            <input type=\"number\" class=\"form-control\" id=\"tempo\" formControlName=\"tempo\" placeholder=\"Enter tempo in BPM\">\n            <div *ngIf=\"songForm.get('tempo')?.invalid && songForm.get('tempo')?.touched\" class=\"text-danger\">\n              Tempo must be a positive number\n            </div>\n          </div>\n\n          <!-- Tempo Category -->\n          <div class=\"mb-3\">\n            <label for=\"tempo_category\" class=\"form-label\">Tempo Category</label>\n            <select class=\"form-select\" id=\"tempo_category\" formControlName=\"tempo_category\">\n              <option value=\"\">Select tempo category</option>\n              <option *ngFor=\"let category of tempoCategories\" [value]=\"category\">\n                {{ category | titlecase }}\n              </option>\n            </select>\n          </div>\n\n          <!-- Intensity -->\n          <div class=\"mb-3\">\n            <label for=\"intensity\" class=\"form-label\">Intensity</label>\n            <select class=\"form-select\" id=\"intensity\" formControlName=\"intensity\">\n              <option value=\"\">Select intensity level</option>\n              <option *ngFor=\"let level of intensityLevels\" [value]=\"level\">\n                {{ level | titlecase }}\n              </option>\n            </select>\n          </div>\n\n          <!-- Key -->\n          <div class=\"mb-3\">\n            <label for=\"key\" class=\"form-label\">Key</label>\n            <input type=\"text\" class=\"form-control\" id=\"key\" formControlName=\"key\" placeholder=\"e.g., A Minor, C Major\">\n          </div>\n\n          <!-- Is Minor -->\n          <div class=\"form-check mb-3\">\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"is_minor\" formControlName=\"is_minor\">\n            <label class=\"form-check-label\" for=\"is_minor\">\n              Minor Key\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Additional Properties -->\n    <div class=\"col-12\">\n      <div class=\"card mb-4\">\n        <div class=\"card-header\">Additional Properties</div>\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <div class=\"form-check mb-3\">\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"is_original\" formControlName=\"is_original\">\n                <label class=\"form-check-label\" for=\"is_original\">\n                  Original Song\n                </label>\n                <small class=\"form-text text-muted d-block\">Uncheck if this is a cover song</small>\n              </div>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-check mb-3\">\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"is_hit\" formControlName=\"is_hit\">\n                <label class=\"form-check-label\" for=\"is_hit\">\n                  Hit Song\n                </label>\n                <small class=\"form-text text-muted d-block\">Check if this song should be included in every setlist</small>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-grid gap-2 d-md-flex justify-content-md-end mt-4\">\n    <a routerLink=\"/songs\" class=\"btn btn-secondary me-md-2\">Cancel</a>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"submitting\">\n      <span *ngIf=\"submitting\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\n      {{ isEditMode ? 'Update' : 'Save' }} Song\n    </button>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}