{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/setlist.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SetlistGeneratorComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.error, \" \");\n  }\n}\nfunction SetlistGeneratorComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1, \" Setlist name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SetlistGeneratorComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1, \" Duration must be at least 10 minutes \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SetlistGeneratorComponent_span_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 35);\n  }\n}\nexport class SetlistGeneratorComponent {\n  constructor(fb, setlistService, router) {\n    this.fb = fb;\n    this.setlistService = setlistService;\n    this.router = router;\n    this.generating = false;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    const today = new Date().toISOString().split('T')[0];\n    this.generatorForm = this.fb.group({\n      name: ['', [Validators.required]],\n      date: [today],\n      venue: [''],\n      target_duration: [3600, [Validators.required, Validators.min(600)]] // Minimum 10 minutes (600 seconds)\n    });\n  }\n\n  onSubmit() {\n    if (this.generatorForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.generatorForm.controls).forEach(key => {\n        this.generatorForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n    this.generating = true;\n    this.error = '';\n    this.setlistService.generateSetlist(this.generatorForm.value).subscribe({\n      next: setlist => {\n        this.generating = false;\n        // Navigate to the setlist view page\n        this.router.navigate(['/setlists', setlist.id]);\n      },\n      error: err => {\n        this.generating = false;\n        this.error = err.error?.error || 'Failed to generate setlist. Please try again later.';\n        console.error('Error generating setlist:', err);\n      }\n    });\n  }\n  // Helper method to convert duration from hours and minutes to seconds\n  convertDurationToSeconds(hours, minutes) {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) : minutes;\n    return hoursNum * 3600 + minutesNum * 60;\n  }\n  // Helper method to extract hours and minutes from duration in seconds\n  extractDurationComponents(durationInSeconds) {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor(durationInSeconds % 3600 / 60);\n    return {\n      hours,\n      minutes\n    };\n  }\n  // Update the form when hours/minutes inputs change\n  updateDuration(hours, minutes) {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) || 0 : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) || 0 : minutes;\n    const totalSeconds = this.convertDurationToSeconds(hoursNum, minutesNum);\n    this.generatorForm.patchValue({\n      target_duration: totalSeconds\n    });\n  }\n  static {\n    this.ɵfac = function SetlistGeneratorComponent_Factory(t) {\n      return new (t || SetlistGeneratorComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SetlistService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SetlistGeneratorComponent,\n      selectors: [[\"app-setlist-generator\"]],\n      decls: 70,\n      vars: 8,\n      consts: [[1, \"row\", \"mb-4\"], [1, \"col\"], [1, \"col-auto\"], [\"routerLink\", \"/songs\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Enter setlist name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"date\", 1, \"form-label\"], [\"type\", \"date\", \"id\", \"date\", \"formControlName\", \"date\", 1, \"form-control\"], [\"for\", \"venue\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"venue\", \"formControlName\", \"venue\", \"placeholder\", \"Enter venue name\", 1, \"form-control\"], [\"for\", \"target_duration\", 1, \"form-label\"], [1, \"row\", \"g-2\"], [1, \"col-6\"], [1, \"input-group\"], [\"type\", \"number\", \"id\", \"hours\", \"min\", \"0\", \"max\", \"5\", \"placeholder\", \"Hours\", 1, \"form-control\", 3, \"value\", \"change\"], [1, \"input-group-text\"], [\"type\", \"number\", \"id\", \"minutes\", \"min\", \"0\", \"max\", \"59\", \"placeholder\", \"Minutes\", 1, \"form-control\", 3, \"value\", \"change\"], [1, \"form-text\", \"text-muted\"], [1, \"alert\", \"alert-info\", \"mt-3\"], [1, \"alert-heading\"], [1, \"d-grid\", \"gap-2\", \"d-md-flex\", \"justify-content-md-end\", \"mt-4\"], [\"routerLink\", \"/songs\", 1, \"btn\", \"btn-secondary\", \"me-md-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", \"role\", \"status\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [1, \"text-danger\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n      template: function SetlistGeneratorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n          i0.ɵɵtext(3, \"Generate Setlist\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"a\", 3);\n          i0.ɵɵtext(6, \"Back to Song Library\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5);\n          i0.ɵɵtext(9, \" Setlist Parameters \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 6);\n          i0.ɵɵtemplate(11, SetlistGeneratorComponent_div_11_Template, 2, 1, \"div\", 7);\n          i0.ɵɵelementStart(12, \"form\", 8);\n          i0.ɵɵlistener(\"ngSubmit\", function SetlistGeneratorComponent_Template_form_ngSubmit_12_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 10)(15, \"div\", 11)(16, \"label\", 12);\n          i0.ɵɵtext(17, \"Setlist Name *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 13);\n          i0.ɵɵtemplate(19, SetlistGeneratorComponent_div_19_Template, 2, 0, \"div\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 11)(21, \"label\", 15);\n          i0.ɵɵtext(22, \"Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(23, \"input\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 11)(25, \"label\", 17);\n          i0.ɵɵtext(26, \"Venue\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 10)(29, \"div\", 11)(30, \"label\", 19);\n          i0.ɵɵtext(31, \"Target Duration *\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"div\", 20)(33, \"div\", 21)(34, \"div\", 22)(35, \"input\", 23);\n          i0.ɵɵlistener(\"change\", function SetlistGeneratorComponent_Template_input_change_35_listener($event) {\n            let tmp_b_0;\n            return ctx.updateDuration($event.target.value, ctx.extractDurationComponents(((tmp_b_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_b_0.value) || 3600).minutes);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"span\", 24);\n          i0.ɵɵtext(37, \"hours\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(38, \"div\", 21)(39, \"div\", 22)(40, \"input\", 25);\n          i0.ɵɵlistener(\"change\", function SetlistGeneratorComponent_Template_input_change_40_listener($event) {\n            let tmp_b_0;\n            return ctx.updateDuration(ctx.extractDurationComponents(((tmp_b_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_b_0.value) || 3600).hours, $event.target.value);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"span\", 24);\n          i0.ɵɵtext(42, \"minutes\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(43, SetlistGeneratorComponent_div_43_Template, 2, 0, \"div\", 14);\n          i0.ɵɵelementStart(44, \"small\", 26);\n          i0.ɵɵtext(45, \"Set the target duration for your setlist. The generator will select songs to match this duration.\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(46, \"div\", 27)(47, \"h5\", 28);\n          i0.ɵɵtext(48, \"How the Setlist Generator Works\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"p\");\n          i0.ɵɵtext(50, \"The setlist generator will create a balanced setlist based on your song library, following these rules:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"ul\")(52, \"li\");\n          i0.ɵɵtext(53, \"All \\\"hit\\\" songs will be included automatically\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"li\");\n          i0.ɵɵtext(55, \"Major/Minor keys will be evenly distributed\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"li\");\n          i0.ɵɵtext(57, \"Tempo categories (slow, medium, fast) will be evenly distributed\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"li\");\n          i0.ɵɵtext(59, \"Original/Cover songs will be evenly distributed\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(60, \"li\");\n          i0.ɵɵtext(61, \"Lead vocalist duties will be evenly distributed\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(62, \"li\");\n          i0.ɵɵtext(63, \"The total duration will match your target as closely as possible\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(64, \"div\", 29)(65, \"a\", 30);\n          i0.ɵɵtext(66, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(67, \"button\", 31);\n          i0.ɵɵtemplate(68, SetlistGeneratorComponent_span_68_Template, 1, 0, \"span\", 32);\n          i0.ɵɵtext(69, \" Generate Setlist \");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_4_0;\n          let tmp_5_0;\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.generatorForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.generatorForm.get(\"name\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.generatorForm.get(\"name\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"value\", ctx.extractDurationComponents(((tmp_3_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_3_0.value) || 3600).hours);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"value\", ctx.extractDurationComponents(((tmp_4_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_4_0.value) || 3600).minutes);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.generatorForm.get(\"target_duration\")) == null ? null : tmp_5_0.touched));\n          i0.ɵɵadvance(24);\n          i0.ɵɵproperty(\"disabled\", ctx.generating);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.generating);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zZXRsaXN0LWdlbmVyYXRvci9zZXRsaXN0LWdlbmVyYXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIFNldGxpc3QgZ2VuZXJhdG9yIGNvbXBvbmVudCBzdHlsZXMgKi9cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICa/DC,+BAA8C;IAC5CA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,6CACF;;;;;IASQA,+BAA0G;IACxGA,0CACF;IAAAA,iBAAM;;;;;IAwCNA,+BAAgI;IAC9HA,sDACF;IAAAA,iBAAM;;;;;IAsBRA,2BAA+G;;;ADjFzH,OAAM,MAAOC,yBAAyB;EAKpCC,YACUC,EAAe,EACfC,cAA8B,EAC9BC,MAAc;IAFd,OAAE,GAAFF,EAAE;IACF,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IANhB,eAAU,GAAG,KAAK;IAClB,UAAK,GAAG,EAAE;EAMN;EAEJC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEpD,IAAI,CAACC,aAAa,GAAG,IAAI,CAACT,EAAE,CAACU,KAAK,CAAC;MACjCC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACgB,QAAQ,CAAC,CAAC;MACjCC,IAAI,EAAE,CAACR,KAAK,CAAC;MACbS,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,eAAe,EAAE,CAAC,IAAI,EAAE,CAACnB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACoB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACrE,CAAC;EACJ;;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACR,aAAa,CAACS,OAAO,EAAE;MAC9B;MACAC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACX,aAAa,CAACY,QAAQ,CAAC,CAACC,OAAO,CAACC,GAAG,IAAG;QACrD,IAAI,CAACd,aAAa,CAACe,GAAG,CAACD,GAAG,CAAC,EAAEE,aAAa,EAAE;MAC9C,CAAC,CAAC;MACF;;IAGF,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,KAAK,GAAG,EAAE;IAEf,IAAI,CAAC1B,cAAc,CAAC2B,eAAe,CAAC,IAAI,CAACnB,aAAa,CAACoB,KAAK,CAAC,CAACC,SAAS,CAAC;MACtEC,IAAI,EAAGC,OAAO,IAAI;QAChB,IAAI,CAACN,UAAU,GAAG,KAAK;QACvB;QACA,IAAI,CAACxB,MAAM,CAAC+B,QAAQ,CAAC,CAAC,WAAW,EAAED,OAAO,CAACE,EAAE,CAAC,CAAC;MACjD,CAAC;MACDP,KAAK,EAAGQ,GAAG,IAAI;QACb,IAAI,CAACT,UAAU,GAAG,KAAK;QACvB,IAAI,CAACC,KAAK,GAAGQ,GAAG,CAACR,KAAK,EAAEA,KAAK,IAAI,qDAAqD;QACtFS,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEQ,GAAG,CAAC;MACjD;KACD,CAAC;EACJ;EAEA;EACAE,wBAAwB,CAACC,KAAsB,EAAEC,OAAwB;IACvE,MAAMC,QAAQ,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGG,QAAQ,CAACH,KAAK,EAAE,EAAE,CAAC,GAAGA,KAAK;IACxE,MAAMI,UAAU,GAAG,OAAOH,OAAO,KAAK,QAAQ,GAAGE,QAAQ,CAACF,OAAO,EAAE,EAAE,CAAC,GAAGA,OAAO;IAChF,OAAQC,QAAQ,GAAG,IAAI,GAAKE,UAAU,GAAG,EAAG;EAC9C;EAEA;EACAC,yBAAyB,CAACC,iBAAyB;IACjD,MAAMN,KAAK,GAAGO,IAAI,CAACC,KAAK,CAACF,iBAAiB,GAAG,IAAI,CAAC;IAClD,MAAML,OAAO,GAAGM,IAAI,CAACC,KAAK,CAAEF,iBAAiB,GAAG,IAAI,GAAI,EAAE,CAAC;IAE3D,OAAO;MAAEN,KAAK;MAAEC;IAAO,CAAE;EAC3B;EAEA;EACAQ,cAAc,CAACT,KAAsB,EAAEC,OAAwB;IAC7D,MAAMC,QAAQ,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGG,QAAQ,CAACH,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,GAAGA,KAAK;IAC7E,MAAMI,UAAU,GAAG,OAAOH,OAAO,KAAK,QAAQ,GAAGE,QAAQ,CAACF,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,GAAGA,OAAO;IACrF,MAAMS,YAAY,GAAG,IAAI,CAACX,wBAAwB,CAACG,QAAQ,EAAEE,UAAU,CAAC;IACxE,IAAI,CAACjC,aAAa,CAACwC,UAAU,CAAC;MAAElC,eAAe,EAAEiC;IAAY,CAAE,CAAC;EAClE;;;uBAzEWlD,yBAAyB;IAAA;EAAA;;;YAAzBA,yBAAyB;MAAAoD;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCVtCzD,8BAAsB;UAEdA,gCAAgB;UAAAA,iBAAK;UAE3BA,8BAAsB;UACqCA,oCAAoB;UAAAA,iBAAI;UAIrFA,8BAAkB;UAEdA,oCACF;UAAAA,iBAAM;UACNA,+BAAuB;UACrBA,4EAEM;UAENA,gCAA0D;UAAxBA;YAAA,OAAY0D,cAAU;UAAA,EAAC;UACvD1D,+BAAiB;UAI0BA,+BAAc;UAAAA,iBAAQ;UAC3DA,6BAA0G;UAC1GA,6EAEM;UACRA,iBAAM;UAGNA,gCAAkB;UACqBA,qBAAI;UAAAA,iBAAQ;UACjDA,6BAAyE;UAC3EA,iBAAM;UAGNA,gCAAkB;UACsBA,sBAAK;UAAAA,iBAAQ;UACnDA,6BAA0G;UAC5GA,iBAAM;UAGRA,gCAAsB;UAG8BA,kCAAiB;UAAAA,iBAAQ;UACzEA,gCAAqB;UAKRA;YAAA;YAAA,OAAU0D,wCAA0CA,0CAA0BA,sBAAkB,iBAAiB,CAAC,qCAAW,IAAI,CAAC,SAAS;UAAA,EAAC;UAFnJ1D,iBAG2C;UAC3CA,iCAA+B;UAAAA,sBAAK;UAAAA,iBAAO;UAG/CA,gCAAmB;UAIRA;YAAA;YAAA,OAAU0D,mBAAeA,0CAA0BA,sBAAkB,iBAAiB,CAAC,qCAAW,IAAI,CAAC,4BAAkC;UAAA,EAAC;UAFjJ1D,iBAG8C;UAC9CA,iCAA+B;UAAAA,wBAAO;UAAAA,iBAAO;UAInDA,6EAEM;UACNA,kCAAoC;UAAAA,kHAAiG;UAAAA,iBAAQ;UAKnJA,gCAAmC;UACPA,gDAA+B;UAAAA,iBAAK;UAC9DA,0BAAG;UAAAA,wHAAuG;UAAAA,iBAAI;UAC9GA,2BAAI;UACEA,iEAA8C;UAAAA,iBAAK;UACvDA,2BAAI;UAAAA,4DAA2C;UAAAA,iBAAK;UACpDA,2BAAI;UAAAA,iFAAgE;UAAAA,iBAAK;UACzEA,2BAAI;UAAAA,gEAA+C;UAAAA,iBAAK;UACxDA,2BAAI;UAAAA,gEAA+C;UAAAA,iBAAK;UACxDA,2BAAI;UAAAA,iFAAgE;UAAAA,iBAAK;UAI7EA,gCAAgE;UACLA,uBAAM;UAAAA,iBAAI;UACnEA,mCAAsE;UACpEA,+EAA+G;UAC/GA,mCACF;UAAAA,iBAAS;;;;;;;UA/EPA,gBAAW;UAAXA,gCAAW;UAIXA,eAA2B;UAA3BA,6CAA2B;UAOnBA,eAA8E;UAA9EA,mLAA8E;UA0BvEA,gBAA8F;UAA9FA,0JAA8F;UAS9FA,eAAgG;UAAhGA,4JAAgG;UAOvGA,eAAoG;UAApGA,yMAAoG;UAuBhEA,gBAAuB;UAAvBA,yCAAuB;UAC5DA,eAAgB;UAAhBA,qCAAgB","names":["Validators","i0","SetlistGeneratorComponent","constructor","fb","setlistService","router","ngOnInit","initForm","today","Date","toISOString","split","generatorForm","group","name","required","date","venue","target_duration","min","onSubmit","invalid","Object","keys","controls","forEach","key","get","markAsTouched","generating","error","generateSetlist","value","subscribe","next","setlist","navigate","id","err","console","convertDurationToSeconds","hours","minutes","hoursNum","parseInt","minutesNum","extractDurationComponents","durationInSeconds","Math","floor","updateDuration","totalSeconds","patchValue","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\components\\setlist-generator\\setlist-generator.component.ts","C:\\Users\\joe.kasmann\\CascadeProjects\\setlist-generator\\frontend\\src\\app\\components\\setlist-generator\\setlist-generator.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SetlistService } from '../../services/setlist.service';\n\n@Component({\n  selector: 'app-setlist-generator',\n  templateUrl: './setlist-generator.component.html',\n  styleUrls: ['./setlist-generator.component.scss']\n})\nexport class SetlistGeneratorComponent implements OnInit {\n  generatorForm!: FormGroup;\n  generating = false;\n  error = '';\n  \n  constructor(\n    private fb: FormBuilder,\n    private setlistService: SetlistService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    const today = new Date().toISOString().split('T')[0];\n    \n    this.generatorForm = this.fb.group({\n      name: ['', [Validators.required]],\n      date: [today],\n      venue: [''],\n      target_duration: [3600, [Validators.required, Validators.min(600)]] // Minimum 10 minutes (600 seconds)\n    });\n  }\n\n  onSubmit(): void {\n    if (this.generatorForm.invalid) {\n      // Mark all fields as touched to trigger validation messages\n      Object.keys(this.generatorForm.controls).forEach(key => {\n        this.generatorForm.get(key)?.markAsTouched();\n      });\n      return;\n    }\n\n    this.generating = true;\n    this.error = '';\n\n    this.setlistService.generateSetlist(this.generatorForm.value).subscribe({\n      next: (setlist) => {\n        this.generating = false;\n        // Navigate to the setlist view page\n        this.router.navigate(['/setlists', setlist.id]);\n      },\n      error: (err) => {\n        this.generating = false;\n        this.error = err.error?.error || 'Failed to generate setlist. Please try again later.';\n        console.error('Error generating setlist:', err);\n      }\n    });\n  }\n\n  // Helper method to convert duration from hours and minutes to seconds\n  convertDurationToSeconds(hours: number | string, minutes: number | string): number {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) : minutes;\n    return (hoursNum * 3600) + (minutesNum * 60);\n  }\n\n  // Helper method to extract hours and minutes from duration in seconds\n  extractDurationComponents(durationInSeconds: number): { hours: number, minutes: number } {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor((durationInSeconds % 3600) / 60);\n    \n    return { hours, minutes };\n  }\n\n  // Update the form when hours/minutes inputs change\n  updateDuration(hours: number | string, minutes: number | string): void {\n    const hoursNum = typeof hours === 'string' ? parseInt(hours, 10) || 0 : hours;\n    const minutesNum = typeof minutes === 'string' ? parseInt(minutes, 10) || 0 : minutes;\n    const totalSeconds = this.convertDurationToSeconds(hoursNum, minutesNum);\n    this.generatorForm.patchValue({ target_duration: totalSeconds });\n  }\n}\n","<div class=\"row mb-4\">\n  <div class=\"col\">\n    <h2>Generate Setlist</h2>\n  </div>\n  <div class=\"col-auto\">\n    <a routerLink=\"/songs\" class=\"btn btn-outline-secondary\">Back to Song Library</a>\n  </div>\n</div>\n\n<div class=\"card\">\n  <div class=\"card-header\">\n    Setlist Parameters\n  </div>\n  <div class=\"card-body\">\n    <div *ngIf=\"error\" class=\"alert alert-danger\">\n      {{ error }}\n    </div>\n\n    <form [formGroup]=\"generatorForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <!-- Setlist Name -->\n          <div class=\"mb-3\">\n            <label for=\"name\" class=\"form-label\">Setlist Name *</label>\n            <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" placeholder=\"Enter setlist name\">\n            <div *ngIf=\"generatorForm.get('name')?.invalid && generatorForm.get('name')?.touched\" class=\"text-danger\">\n              Setlist name is required\n            </div>\n          </div>\n\n          <!-- Date -->\n          <div class=\"mb-3\">\n            <label for=\"date\" class=\"form-label\">Date</label>\n            <input type=\"date\" class=\"form-control\" id=\"date\" formControlName=\"date\">\n          </div>\n\n          <!-- Venue -->\n          <div class=\"mb-3\">\n            <label for=\"venue\" class=\"form-label\">Venue</label>\n            <input type=\"text\" class=\"form-control\" id=\"venue\" formControlName=\"venue\" placeholder=\"Enter venue name\">\n          </div>\n        </div>\n\n        <div class=\"col-md-6\">\n          <!-- Target Duration -->\n          <div class=\"mb-3\">\n            <label for=\"target_duration\" class=\"form-label\">Target Duration *</label>\n            <div class=\"row g-2\">\n              <div class=\"col-6\">\n                <div class=\"input-group\">\n                  <input type=\"number\" class=\"form-control\" id=\"hours\" \n                         [value]=\"extractDurationComponents(generatorForm.get('target_duration')?.value || 3600).hours\"\n                         (change)=\"updateDuration($any($event.target).value, extractDurationComponents(generatorForm.get('target_duration')?.value || 3600).minutes)\"\n                         min=\"0\" max=\"5\" placeholder=\"Hours\">\n                  <span class=\"input-group-text\">hours</span>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"input-group\">\n                  <input type=\"number\" class=\"form-control\" id=\"minutes\" \n                         [value]=\"extractDurationComponents(generatorForm.get('target_duration')?.value || 3600).minutes\"\n                         (change)=\"updateDuration(extractDurationComponents(generatorForm.get('target_duration')?.value || 3600).hours, $any($event.target).value)\"\n                         min=\"0\" max=\"59\" placeholder=\"Minutes\">\n                  <span class=\"input-group-text\">minutes</span>\n                </div>\n              </div>\n            </div>\n            <div *ngIf=\"generatorForm.get('target_duration')?.invalid && generatorForm.get('target_duration')?.touched\" class=\"text-danger\">\n              Duration must be at least 10 minutes\n            </div>\n            <small class=\"form-text text-muted\">Set the target duration for your setlist. The generator will select songs to match this duration.</small>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"alert alert-info mt-3\">\n        <h5 class=\"alert-heading\">How the Setlist Generator Works</h5>\n        <p>The setlist generator will create a balanced setlist based on your song library, following these rules:</p>\n        <ul>\n          <li>All \"hit\" songs will be included automatically</li>\n          <li>Major/Minor keys will be evenly distributed</li>\n          <li>Tempo categories (slow, medium, fast) will be evenly distributed</li>\n          <li>Original/Cover songs will be evenly distributed</li>\n          <li>Lead vocalist duties will be evenly distributed</li>\n          <li>The total duration will match your target as closely as possible</li>\n        </ul>\n      </div>\n\n      <div class=\"d-grid gap-2 d-md-flex justify-content-md-end mt-4\">\n        <a routerLink=\"/songs\" class=\"btn btn-secondary me-md-2\">Cancel</a>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"generating\">\n          <span *ngIf=\"generating\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\n          Generate Setlist\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}